"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/collective-weights/page",{

/***/ "(app-pages-browser)/./lib/neon-db.ts":
/*!************************!*\
  !*** ./lib/neon-db.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateAverageWeights: () => (/* binding */ calculateAverageWeights),\n/* harmony export */   checkDatabaseConnection: () => (/* binding */ checkDatabaseConnection),\n/* harmony export */   deleteAHPEvaluation: () => (/* binding */ deleteAHPEvaluation),\n/* harmony export */   deleteAllAHPEvaluations: () => (/* binding */ deleteAllAHPEvaluations),\n/* harmony export */   deleteMultipleAHPEvaluations: () => (/* binding */ deleteMultipleAHPEvaluations),\n/* harmony export */   getAHPEvaluationByUser: () => (/* binding */ getAHPEvaluationByUser),\n/* harmony export */   getAllAHPEvaluations: () => (/* binding */ getAllAHPEvaluations),\n/* harmony export */   getConnectionStatus: () => (/* binding */ getConnectionStatus),\n/* harmony export */   getStorageStats: () => (/* binding */ getStorageStats),\n/* harmony export */   initializeDatabase: () => (/* binding */ initializeDatabase),\n/* harmony export */   isDatabaseReady: () => (/* binding */ isDatabaseReady),\n/* harmony export */   saveAHPEvaluation: () => (/* binding */ saveAHPEvaluation)\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @neondatabase/serverless */ \"(app-pages-browser)/./node_modules/@neondatabase/serverless/index.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n      CREATE TABLE IF NOT EXISTS ahp_evaluations (\\n        id TEXT PRIMARY KEY,\\n        user_name TEXT NOT NULL,\\n        criteria_weights JSONB NOT NULL,\\n        global_weights JSONB NOT NULL,\\n        consistency_results JSONB NOT NULL,\\n        hierarchy_data JSONB NOT NULL,\\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\\n      )\\n    \"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n      CREATE INDEX IF NOT EXISTS idx_ahp_evaluations_user_name\\n      ON ahp_evaluations(user_name)\\n    \"\n    ]);\n    _templateObject1 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject2() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n      CREATE INDEX IF NOT EXISTS idx_ahp_evaluations_updated_at\\n      ON ahp_evaluations(updated_at)\\n    \"\n    ]);\n    _templateObject2 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject3() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n      SELECT id FROM ahp_evaluations WHERE user_name = \",\n        \"\\n    \"\n    ]);\n    _templateObject3 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject4() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n        UPDATE ahp_evaluations SET\\n          criteria_weights   = \",\n        \",\\n          global_weights     = \",\n        \",\\n          consistency_results= \",\n        \",\\n          hierarchy_data     = \",\n        \",\\n          updated_at         = \",\n        \"\\n        WHERE user_name      = \",\n        \"\\n        RETURNING *\\n      \"\n    ]);\n    _templateObject4 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject5() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n      INSERT INTO ahp_evaluations (\\n        id, user_name, criteria_weights, global_weights,\\n        consistency_results, hierarchy_data, created_at, updated_at\\n      ) VALUES (\\n        \",\n        \", \",\n        \", \",\n        \", \",\n        \",\\n        \",\n        \", \",\n        \", \",\n        \", \",\n        \"\\n      )\\n      RETURNING *\\n    \"\n    ]);\n    _templateObject5 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject6() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"SELECT * FROM ahp_evaluations ORDER BY updated_at DESC\"\n    ]);\n    _templateObject6 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject7() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"SELECT * FROM ahp_evaluations WHERE user_name = \",\n        \"\"\n    ]);\n    _templateObject7 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject8() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"DELETE FROM ahp_evaluations WHERE id = \",\n        \" RETURNING id\"\n    ]);\n    _templateObject8 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject9() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"DELETE FROM ahp_evaluations WHERE id = ANY(\",\n        \") RETURNING id\"\n    ]);\n    _templateObject9 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject10() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"DELETE FROM ahp_evaluations RETURNING id\"\n    ]);\n    _templateObject10 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject11() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n      SELECT \\n        COUNT(*) as total_evaluations,\\n        MAX(updated_at) as last_updated\\n      FROM ahp_evaluations\\n    \"\n    ]);\n    _templateObject11 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject12() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"SELECT 1 as test\"\n    ]);\n    _templateObject12 = function() {\n        return data;\n    };\n    return data;\n}\n\n/* ------------------------------------------------------------------ */ /*  Neon connection (or in-memory fallback)                           */ /* ------------------------------------------------------------------ */ let sql = null;\nlet neonReady = false;\nlet connectionError = null;\n// DATABASE_URL validation\nfunction validateDatabaseUrl(url) {\n    try {\n        // Neon URL should start with postgresql:// or postgres://\n        if (!url.startsWith(\"postgresql://\") && !url.startsWith(\"postgres://\")) {\n            return false;\n        }\n        // Basic URL validation\n        const urlObj = new URL(url);\n        return urlObj.hostname && urlObj.pathname;\n    } catch (e) {\n        return false;\n    }\n}\ntry {\n    if (process.env.DATABASE_URL) {\n        console.log(\"DATABASE_URL found, validating...\");\n        if (!validateDatabaseUrl(process.env.DATABASE_URL)) {\n            throw new Error(\"Invalid DATABASE_URL format. Expected postgresql:// or postgres:// URL\");\n        }\n        console.log(\"DATABASE_URL is valid, creating Neon connection...\");\n        sql = (0,_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neon)(process.env.DATABASE_URL);\n        neonReady = true;\n        console.log(\"Neon connection created successfully\");\n    } else {\n        console.warn(\"‚ö†Ô∏è  DATABASE_URL environment variable not found!\");\n        console.warn(\"‚ö†Ô∏è  Using in-memory storage - data will be lost on restart\");\n        console.warn(\"‚ö†Ô∏è  To persist data, create a .env file with DATABASE_URL\");\n        connectionError = \"DATABASE_URL environment variable not found\";\n    }\n} catch (e) {\n    console.error(\"‚ùå Neon connection initialization error:\", e);\n    console.warn(\"‚ö†Ô∏è  Falling back to in-memory storage - data will be lost on restart\");\n    connectionError = e instanceof Error ? e.message : \"Unknown connection error\";\n    neonReady = false;\n}\n// TEST MODE: Simulate database connection for testing (only if no DATABASE_URL)\nif (!neonReady && \"development\" === 'development' && !process.env.DATABASE_URL) {\n    console.log(\"üß™ TEST MODE: Simulating database connection...\");\n    neonReady = true;\n    connectionError = null;\n    console.log(\"‚úÖ Test mode: Database connection simulated\");\n}\n/* ------------------------------------------------------------------ */ /*  One-time table creation promise                                   */ /* ------------------------------------------------------------------ */ async function createTables() {\n    if (!neonReady || !sql) {\n        console.log(\"Skipping table creation - Neon not ready\");\n        return;\n    }\n    try {\n        console.log(\"Creating tables if they don't exist...\");\n        // Create table first\n        await sql(_templateObject());\n        // Create indexes separately\n        await sql(_templateObject1());\n        await sql(_templateObject2());\n        console.log(\"Neon: ahp_evaluations table and indexes created successfully\");\n    } catch (error) {\n        console.error(\"Table creation error:\", error);\n        throw error;\n    }\n}\nconst initPromise = neonReady ? createTables() : Promise.resolve();\n/* ------------------------------------------------------------------ */ /*  In-memory storage (used when Neon isn't configured)               */ /* ------------------------------------------------------------------ */ const mem = [];\nconst memFindByUser = (u)=>{\n    var _mem_find;\n    return (_mem_find = mem.find((e)=>e.user_name === u)) !== null && _mem_find !== void 0 ? _mem_find : null;\n};\nconst memSave = (row)=>{\n    const i = mem.findIndex((e)=>e.user_name === row.user_name);\n    i === -1 ? mem.push(row) : mem[i] = row;\n    return row;\n};\n/* ------------------------------------------------------------------ */ /*  Public helpers                                                    */ /* ------------------------------------------------------------------ */ async function initializeDatabase() {\n    try {\n        await initPromise;\n        console.log(\"Database initialization completed\");\n    } catch (error) {\n        console.error(\"Database initialization failed:\", error);\n        throw error;\n    }\n}\n/* CREATE / UPDATE (upsert by user) */ async function saveAHPEvaluation(userName, criteriaWeights, globalWeights, consistencyResults, hierarchyData) {\n    const now = new Date().toISOString();\n    /* In-memory mode -------------------------------------------------- */ if (!neonReady) {\n        console.warn(\"‚ö†Ô∏è  Neon DB not ready (\".concat(connectionError, \"), saving to in-memory for user: \").concat(userName));\n        console.warn(\"‚ö†Ô∏è  This data will be LOST when the application restarts!\");\n        const row = {\n            id: generateId(),\n            user_name: userName,\n            criteria_weights: criteriaWeights,\n            global_weights: globalWeights,\n            consistency_results: consistencyResults,\n            hierarchy_data: hierarchyData,\n            created_at: now,\n            updated_at: now\n        };\n        return memSave(row);\n    }\n    /* Neon mode ------------------------------------------------------- */ try {\n        await initPromise;\n        console.log(\"Checking for existing evaluation for user: \".concat(userName));\n        const existing = await sql(_templateObject3(), userName);\n        if (existing.length) {\n            console.log(\"Updating existing evaluation for user: \".concat(userName));\n            const res = await sql(_templateObject4(), JSON.stringify(criteriaWeights), JSON.stringify(globalWeights), JSON.stringify(consistencyResults), JSON.stringify(hierarchyData), now, userName);\n            console.log(\"Neon: Updated evaluation for user \".concat(userName));\n            return parseRow(res[0]);\n        }\n        console.log(\"Creating new evaluation for user: \".concat(userName));\n        const res = await sql(_templateObject5(), generateId(), userName, JSON.stringify(criteriaWeights), JSON.stringify(globalWeights), JSON.stringify(consistencyResults), JSON.stringify(hierarchyData), now, now);\n        console.log(\"Neon: Inserted new evaluation for user \".concat(userName));\n        return parseRow(res[0]);\n    } catch (error) {\n        console.error(\"AHP kaydetme hatasƒ±:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            stack: error.stack,\n            userName,\n            connectionError\n        });\n        throw error;\n    }\n}\n/* READ - all */ async function getAllAHPEvaluations() {\n    if (!neonReady) {\n        console.warn(\"‚ö†Ô∏è  Neon DB not ready (\".concat(connectionError, \"), getting all from in-memory. Count: \").concat(mem.length));\n        console.warn(\"‚ö†Ô∏è  In-memory data will be LOST when the application restarts!\");\n        return [\n            ...mem\n        ] // Return a copy to avoid mutations\n        ;\n    }\n    try {\n        await initPromise;\n        console.log(\"Fetching all evaluations from Neon...\");\n        const res = await sql(_templateObject6());\n        console.log(\"Neon: Fetched \".concat(res.length, \" evaluations\"));\n        return res.map(parseRow);\n    } catch (error) {\n        console.error(\"AHP verilerini getirme hatasƒ±:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            stack: error.stack,\n            connectionError,\n            neonReady\n        });\n        // Fallback to in-memory if database fails\n        console.log(\"Falling back to in-memory storage due to database error\");\n        return [\n            ...mem\n        ];\n    }\n}\n/* READ - by user */ async function getAHPEvaluationByUser(userName) {\n    if (!neonReady) {\n        console.log(\"Neon DB not ready (\".concat(connectionError, \"), getting by user from in-memory: \").concat(userName));\n        return memFindByUser(userName);\n    }\n    try {\n        await initPromise;\n        console.log(\"Fetching evaluation for user: \".concat(userName));\n        const res = await sql(_templateObject7(), userName);\n        console.log(\"Neon: Fetched evaluation for user \".concat(userName, \". Found: \").concat(res.length > 0));\n        return res.length ? parseRow(res[0]) : null;\n    } catch (error) {\n        console.error(\"Kullanƒ±cƒ± AHP verisi getirme hatasƒ±:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            userName,\n            connectionError\n        });\n        // Fallback to in-memory\n        return memFindByUser(userName);\n    }\n}\n/* DELETE single */ async function deleteAHPEvaluation(id) {\n    if (!neonReady) {\n        console.log(\"Neon DB not ready (\".concat(connectionError, \"), deleting from in-memory: \").concat(id));\n        const i = mem.findIndex((e)=>e.id === id);\n        if (i !== -1) {\n            mem.splice(i, 1);\n            console.log(\"Deleted from in-memory. Remaining count: \".concat(mem.length));\n            return true;\n        }\n        console.log(\"Item not found in in-memory storage\");\n        return false;\n    }\n    try {\n        await initPromise;\n        console.log(\"Deleting evaluation with ID: \".concat(id));\n        const result = await sql(_templateObject8(), id);\n        const deleted = result.length > 0;\n        console.log(\"Neon: Delete operation completed. Deleted: \".concat(deleted));\n        return deleted;\n    } catch (error) {\n        console.error(\"Neon: Error deleting single evaluation with ID \".concat(id, \":\"), error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            id,\n            connectionError\n        });\n        return false;\n    }\n}\n/* DELETE multiple */ async function deleteMultipleAHPEvaluations(evaluationIds) {\n    if (!neonReady) {\n        console.log(\"Neon DB not ready (\".concat(connectionError, \"), deleting multiple from in-memory: \").concat(evaluationIds.length, \" items\"));\n        let deletedCount = 0;\n        evaluationIds.forEach((id)=>{\n            const i = mem.findIndex((r)=>r.id === id);\n            if (i !== -1) {\n                mem.splice(i, 1);\n                deletedCount++;\n            }\n        });\n        console.log(\"Deleted \".concat(deletedCount, \" items from in-memory. Remaining count: \").concat(mem.length));\n        return deletedCount > 0;\n    }\n    try {\n        if (evaluationIds.length === 0) {\n            console.log(\"Neon: No evaluation IDs provided for multiple delete\");\n            return true;\n        }\n        await initPromise;\n        console.log(\"Deleting multiple evaluations: \".concat(evaluationIds.length, \" items\"));\n        const result = await sql(_templateObject9(), evaluationIds);\n        const deletedCount = result.length;\n        console.log(\"Neon: Deleted \".concat(deletedCount, \" out of \").concat(evaluationIds.length, \" evaluations\"));\n        return deletedCount > 0;\n    } catch (error) {\n        console.error(\"Neon: Error deleting multiple evaluations:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            evaluationIds,\n            connectionError\n        });\n        return false;\n    }\n}\n/* DELETE all */ async function deleteAllAHPEvaluations() {\n    if (!neonReady) {\n        console.log(\"Neon DB not ready (\".concat(connectionError, \"), deleting all from in-memory\"));\n        const previousCount = mem.length;\n        mem.length = 0;\n        console.log(\"Deleted all \".concat(previousCount, \" items from in-memory\"));\n        return true;\n    }\n    try {\n        await initPromise;\n        console.log(\"Deleting all evaluations from Neon...\");\n        const result = await sql(_templateObject10());\n        const deletedCount = result.length;\n        console.log(\"Neon: Deleted all \".concat(deletedCount, \" evaluations\"));\n        return true;\n    } catch (error) {\n        console.error(\"Neon: Error deleting all evaluations:\", error);\n        console.error(\"Error details:\", {\n            message: error.message,\n            connectionError\n        });\n        return false;\n    }\n}\n/* Calculate average weights */ function calculateAverageWeights(evaluations) {\n    if (evaluations.length === 0) return {};\n    const allWeights = evaluations.map((evaluation)=>evaluation.global_weights);\n    const criteriaIds = Object.keys(allWeights[0] || {});\n    const averageWeights = {};\n    criteriaIds.forEach((criteriaId)=>{\n        const weights = allWeights.map((w)=>w[criteriaId] || 0);\n        averageWeights[criteriaId] = weights.reduce((sum, weight)=>sum + weight, 0) / weights.length;\n    });\n    return averageWeights;\n}\n/* Storage stats */ async function getStorageStats() {\n    if (!neonReady) {\n        return {\n            totalEvaluations: mem.length,\n            lastUpdated: mem.length > 0 ? mem.sort((a, b)=>new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())[0].updated_at : null,\n            storage: \"in-memory\",\n            connectionError\n        };\n    }\n    try {\n        await initPromise;\n        const result = await sql(_templateObject11());\n        return {\n            totalEvaluations: Number(result[0].total_evaluations),\n            lastUpdated: result[0].last_updated,\n            storage: \"neon\",\n            connectionError: null\n        };\n    } catch (error) {\n        console.error(\"ƒ∞statistik alma hatasƒ±:\", error);\n        return {\n            totalEvaluations: 0,\n            lastUpdated: null,\n            storage: \"error\",\n            connectionError: error.message\n        };\n    }\n}\n/* Database connection check */ async function checkDatabaseConnection() {\n    if (!neonReady) {\n        console.log(\"Database connection check failed: \".concat(connectionError));\n        return false;\n    }\n    try {\n        await initPromise;\n        // Test the connection with a simple query\n        await sql(_templateObject12());\n        console.log(\"Database connection test successful\");\n        return true;\n    } catch (error) {\n        console.error(\"Database connection test failed:\", error);\n        return false;\n    }\n}\n/* Simple connection status check (without actual query) */ function isDatabaseReady() {\n    return neonReady && sql !== null;\n}\n/* ------------------------------------------------------------------ */ /*  Utility                                                           */ /* ------------------------------------------------------------------ */ function parseRow(row) {\n    const safeJsonParse = function(value) {\n        let fallback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        if (typeof value === \"object\" && value !== null) {\n            return value // Already parsed\n            ;\n        }\n        if (typeof value === \"string\") {\n            try {\n                return JSON.parse(value);\n            } catch (error) {\n                console.error(\"JSON parse error for value:\", value, error);\n                return fallback;\n            }\n        }\n        return fallback;\n    };\n    return {\n        id: row.id,\n        user_name: row.user_name,\n        criteria_weights: safeJsonParse(row.criteria_weights, {}),\n        global_weights: safeJsonParse(row.global_weights, {}),\n        consistency_results: safeJsonParse(row.consistency_results, {}),\n        hierarchy_data: safeJsonParse(row.hierarchy_data, {}),\n        created_at: row.created_at,\n        updated_at: row.updated_at\n    };\n}\nfunction generateId() {\n    return Date.now().toString(36) + Math.random().toString(36).slice(2);\n}\n// Export connection status for debugging\nfunction getConnectionStatus() {\n    return {\n        neonReady,\n        connectionError,\n        hasEnvironmentUrl: !!process.env.DATABASE_URL,\n        urlValid: process.env.DATABASE_URL ? validateDatabaseUrl(process.env.DATABASE_URL) : false\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/neon-db.ts\n"));

/***/ })

});